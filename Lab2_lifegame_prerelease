#include <iostream>
#define dead 0
#define alive 1
#define undead 1
//Для красоты на выводе живые клетки обозначаются как V (vita) , мертвые как M (mors)
using namespace std;

bool** fieldInit (int s1, int s2) {
    bool **field = new bool *[s1];
    for (int i = 0; i < s1; i++) {
        field[i] = new bool[s2];
    }
    for (int i = 0; i < s1; i++) {
        for (int j = 0; j < s2; j++) {
            field[i][j] = rand() % 2;
        }
    }
    return field;
}

void showField (bool** field, int s1, int s2) {
    cout << "Current field: " << endl;
    for (int i = 0; i < s1; i++) {
        for (int j = 0; j < s2; j++) {
            if (field[i][j] == dead) cout << " M ";
            else cout << " V ";
            if (j == s2 - 1) cout << endl;
        }
    }
}

void freeMem (bool** mas, int s1) {
    for(int i = 0; i < s1; ++i) delete[] mas[i];
    delete[] mas;
}

int aliveNeighbors(bool** field, int x, int y, int s1, int s2) {
    int cntr = 0;
    for (int i = x - 1; i <= x + 1; i++) {
        if (i < 0) continue;
        if (i == s1) break;
        for (int j = y - 1; j <= y + 1; j++) {
            if (j < 0) continue;
            if (j == s2) break;
            if (i == x && j == y) continue;
            if (field[i][j] == alive) cntr++;
        }
    }
    return cntr;
}

void nextGen (bool** field, int s1, int s2) {
    bool **nextGen = new bool *[s1];
    for (int i = 0; i < s1; i++) {
        nextGen[i] = new bool[s2];
    }
    for (int i = 0; i < s1; i++) {
        for (int j = 0; j < s2; j++) {
            nextGen[i][j] = field[i][j];
            if (aliveNeighbors(field, i, j, s1, s2) < 2 || aliveNeighbors(field, i, j, s1, s2) > 3) nextGen[i][j] = dead;
            if (aliveNeighbors(field, i, j, s1, s2) == 3 && field[i][j] == dead) nextGen[i][j] = undead;
        }
    }
    for (int i = 0; i < s1; i++) {
        for (int j = 0; j < s2; j++) {
            field[i][j] = nextGen[i][j];
        }
    }
    freeMem(nextGen, s1);
}

int main() {
    unsigned int s1, s2;
    cout << "Enter sizes of the field:";
    cin >> s1 >> s2;
    if (s1 == 0 || s2 == 0) {
        cout << "Incorrect size";
        return 1;
    }
    bool **field = fieldInit(s1, s2);
    int stages;
    cout << "How many stages?";
    cin >> stages;
    for (int i = 0; i <= stages; i++) {
        cout << "Stage " << i << endl;
        showField(field, s1, s2);
        nextGen(field, s1, s2);
    }
    freeMem(field, s1);
    return 0;
}
